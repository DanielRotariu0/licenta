{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from \"@angular/core\";\nlet RecruiterHomeComponent = class RecruiterHomeComponent {\n  constructor(router, accountService, databaseService) {\n    this.router = router;\n    this.accountService = accountService;\n    this.databaseService = databaseService;\n    this.jobs = [];\n    this.totalElements = 0;\n    this.totalPages = 0;\n    this.maxJobs = 4; //!!!!!!\n\n    this.companyId = 4;\n    this.displayJobForm = false;\n  }\n\n  ngOnInit() {\n    this.databaseService.getCompanyById(this.companyId).subscribe(company => {\n      this.company = company;\n      this.databaseService.getCompanyIndustriesByCompanyId(this.companyId).subscribe(companyIndustries => {\n        this.companyIndustries = companyIndustries.map(companyIndustry => {\n          this.databaseService.getIndustryByID(companyIndustry.industryId).subscribe(industry => {\n            companyIndustry.industry = industry;\n          });\n          return companyIndustry;\n        });\n        this.selectedCompanyIndustry = companyIndustries[0];\n        this.databaseService.getJobs(0, this.maxJobs, undefined, [this.company], undefined).subscribe(jobQueryResponse => {\n          this.jobs = this.toJobList(jobQueryResponse.jobList);\n          this.totalElements = jobQueryResponse.totalElements;\n          this.totalPages = jobQueryResponse.totalPages;\n          this.selectedJob = this.jobs[0];\n          setTimeout(() => this.paginator.changePage(0));\n        });\n      });\n    });\n  }\n\n  onIndustrySelectionChange(event) {\n    var _a, _b;\n\n    let industryId = (_a = event.value[0]) === null || _a === void 0 ? void 0 : _a.industryId;\n    console.log(industryId);\n    console.log(this.companyIndustries);\n    this.selectedCompanyIndustry = this.companyIndustries.find(companyIndustry => (companyIndustry === null || companyIndustry === void 0 ? void 0 : companyIndustry.industryId) == industryId);\n    console.log(this.selectedCompanyIndustry);\n    this.databaseService.getJobs(0, this.maxJobs, undefined, [this.company], [(_b = this.selectedCompanyIndustry) === null || _b === void 0 ? void 0 : _b.industry]).subscribe(jobQueryResponse => {\n      this.jobs = this.toJobList(jobQueryResponse.jobList);\n      this.totalElements = jobQueryResponse.totalElements;\n      this.totalPages = jobQueryResponse.totalPages;\n      this.selectedJob = this.jobs[0];\n      setTimeout(() => this.paginator.changePage(0));\n    });\n  }\n\n  onPageChange(event) {\n    var _a;\n\n    this.jobs = [];\n    this.databaseService.getJobs(event.page, this.maxJobs, undefined, [this.company], [(_a = this.selectedCompanyIndustry) === null || _a === void 0 ? void 0 : _a.industry]).subscribe(jobQueryResponse => {\n      this.jobs = this.toJobList(jobQueryResponse.jobList);\n    });\n  }\n\n  setSelectedJob(job) {\n    this.selectedJob = job;\n  }\n\n  editJob(job) {}\n\n  viewApplications(job) {\n    this.router.navigate([`recruiter-job-applications/${job.id}`]);\n  }\n\n  markAsClosed(job) {}\n\n  showJobForm() {\n    this.displayJobForm = true;\n    this.databaseService.getCountries().subscribe(countries => {\n      this.countries = countries;\n    });\n    this.databaseService.getWorkTypes().subscribe(workTypes => {\n      this.workTypes = workTypes;\n    });\n    this.databaseService.getJobTypes().subscribe(jobTypes => {\n      this.jobTypes = jobTypes;\n    });\n    this.databaseService.getExperienceLevels().subscribe(experienceLevels => {\n      this.experienceLevels = experienceLevels;\n    });\n  }\n\n  addJob() {\n    this.databaseService.addJob(this.jobTitle, this.loggedUser.id, this.selectedCompany.id, this.jobTitle, this.startDate, this.endDate, this.description).pipe(first()).subscribe({\n      next: userProfessionalExperience => {\n        console.log(\"success\");\n        this.displayUserProfessionalExperienceForm = false;\n        this.databaseService.getCompanyById(userProfessionalExperience.companyId).subscribe(company => {\n          userProfessionalExperience.company = company;\n        });\n        userProfessionalExperience.formattedStartDate = formatDate(userProfessionalExperience.startDate, \"d MMM y\", this.locale);\n        userProfessionalExperience.formattedEndDate = formatDate(userProfessionalExperience.endDate, \"d MMM y\", this.locale);\n        this.userProfessionalExperienceList.push(...[userProfessionalExperience]);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  onCountryChange(event) {\n    this.databaseService.getCitiesByCountryId(this.selectedCountry.id).subscribe(cities => {\n      this.cities = cities;\n    });\n  }\n\n  toJobList(jobResponseList) {\n    return jobResponseList.map(response => this.databaseService.toJob(response));\n  }\n\n};\n\n__decorate([ViewChild(\"paginator\", {\n  static: true\n})], RecruiterHomeComponent.prototype, \"paginator\", void 0);\n\nRecruiterHomeComponent = __decorate([Component({\n  selector: \"app-companies\",\n  templateUrl: \"./recruiter-home.component.html\",\n  styleUrls: [\"./recruiter-home.component.scss\"]\n})], RecruiterHomeComponent);\nexport { RecruiterHomeComponent };","map":null,"metadata":{},"sourceType":"module"}