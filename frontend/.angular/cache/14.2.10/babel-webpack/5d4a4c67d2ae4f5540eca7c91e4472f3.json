{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { formatDate } from \"@angular/common\";\nimport { Component, Inject, LOCALE_ID, ViewEncapsulation } from \"@angular/core\";\nimport { distinctUntilChanged, first } from \"rxjs\";\nlet NotificationsComponent = class NotificationsComponent {\n  constructor(accountService, notificationService, jobApplicationService, menuItemsService, messageService, router, locale) {\n    this.accountService = accountService;\n    this.notificationService = notificationService;\n    this.jobApplicationService = jobApplicationService;\n    this.menuItemsService = menuItemsService;\n    this.messageService = messageService;\n    this.router = router;\n    this.locale = locale;\n    this.notifications = [];\n  }\n\n  ngOnInit() {\n    this.accountService.user.subscribe(x => this.user = x);\n    this.notificationService.getUserNotifications(this.user.id).subscribe(notifications => {\n      this.notifications = notifications.map(notification => {\n        notification.formattedTimestamp = formatDate(notification.timestamp, \"d MMM y, h:mm:ss a\", this.locale);\n        return notification;\n      });\n    });\n  }\n\n  goToJobApplication(notification) {\n    if (this.user.isRecruiter) {\n      this.jobApplicationService.getJobApplicationById(notification.jobApplicationId).subscribe(jobApplication => {\n        this.router.navigate([\"/recruiter-job-applications\"], {\n          queryParams: {\n            jobId: `${jobApplication.jobId}`\n          }\n        });\n      });\n    } else {\n      this.router.navigate([\"/job-applications\"], {\n        queryParams: {\n          id: `${notification.jobApplicationId}`\n        }\n      });\n    }\n\n    if (!notification.isRead) {\n      this.notificationService.markNotificationAsRead(notification.id).pipe(first()).subscribe({\n        next: () => {\n          this.menuItemsService.menuItems$.pipe(distinctUntilChanged()).subscribe(menuItems => {\n            menuItems[menuItems.length - 2].badge = String(Number(menuItems[menuItems.length - 2].badge) - 1);\n            this.menuItemsService.updateMenuItems(menuItems);\n          });\n        },\n        error: error => {}\n      });\n    }\n  }\n\n  deleteNotification(notification) {\n    let notificationId = notification.id;\n    this.notificationService.deleteNotification(notificationId).pipe(first()).subscribe({\n      next: () => {\n        if (!notification.isRead) {\n          this.menuItemsService.menuItems$.pipe(distinctUntilChanged()).subscribe(menuItems => {\n            menuItems[menuItems.length - 2].badge = String(Number(menuItems[menuItems.length - 2].badge) - 1);\n            this.menuItemsService.updateMenuItems(menuItems);\n          });\n        }\n\n        this.messageService.add({\n          severity: \"success\",\n          summary: \"Succes\",\n          detail: \"Notification deleted succesfully.\"\n        });\n        this.notifications = this.notifications.filter(notification => notification.id != notificationId);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n};\nNotificationsComponent = __decorate([Component({\n  selector: \"app-notifications\",\n  templateUrl: \"./notifications.component.html\",\n  styleUrls: [\"./notifications.component.css\"],\n  encapsulation: ViewEncapsulation.None\n}), __param(6, Inject(LOCALE_ID))], NotificationsComponent);\nexport { NotificationsComponent };","map":null,"metadata":{},"sourceType":"module"}