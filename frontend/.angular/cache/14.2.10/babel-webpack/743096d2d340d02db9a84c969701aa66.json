{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject, LOCALE_ID } from \"@angular/core\";\nimport { first } from \"rxjs\";\nimport { DOCUMENT, formatDate } from \"@angular/common\";\nlet UserProfileComponent = class UserProfileComponent {\n  constructor(route, router, accountService, databaseService, locale, document) {\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.databaseService = databaseService;\n    this.locale = locale;\n    this.document = document;\n    this.isOwner = false;\n    this.userProfessionalExperienceList = [];\n    this.userEducationalExperienceList = [];\n    this.userSkills = [];\n    this.userProjects = [];\n    this.userLanguages = [];\n    this.displayUserDetailsForm = false;\n    this.displayUserProfessionalExperienceForm = false;\n    this.displayUserEducationalExperienceForm = false;\n    this.displayUserSkillForm = false;\n    this.displayUserProjectForm = false;\n    this.displayUserLanguageForm = false;\n  }\n\n  ngOnInit() {\n    this.accountService.user.subscribe(x => this.loggedUser = x);\n    this.userId = parseInt(this.route.snapshot.paramMap.get(\"id\"), 10);\n    this.isOwner = this.loggedUser.id == this.userId;\n    this.databaseService.getUserDetails(this.userId).subscribe(userDetails => {\n      this.databaseService.getCityById(userDetails.cityId).subscribe(city => {\n        userDetails.city = city;\n        this.databaseService.getCountryById(userDetails.city.countryId).subscribe(country => {\n          userDetails.country = country;\n        });\n      });\n      this.userDetails = userDetails;\n    });\n    this.databaseService.getUserProfessionalExperience(this.userId).subscribe(userProfessionalExperienceList => {\n      this.userProfessionalExperienceList = userProfessionalExperienceList.map(userProfessionalExperience => {\n        this.databaseService.getCompanyById(userProfessionalExperience.companyId).subscribe(company => {\n          userProfessionalExperience.company = company;\n        });\n        userProfessionalExperience.formattedStartDate = formatDate(userProfessionalExperience.startDate, \"d MMM y\", this.locale);\n        userProfessionalExperience.formattedEndDate = formatDate(userProfessionalExperience.endDate, \"d MMM y\", this.locale);\n        return userProfessionalExperience;\n      });\n    });\n    this.databaseService.getUserEducationalExperience(this.userId).subscribe(userEducationalExperienceList => {\n      this.userEducationalExperienceList = userEducationalExperienceList.map(userEducationalExperience => {\n        this.databaseService.getEducationalInstitutionById(userEducationalExperience.educationalInstitutionId).subscribe(educationalInstitution => {\n          userEducationalExperience.educationalInstitution = educationalInstitution;\n        });\n        userEducationalExperience.formattedStartDate = formatDate(userEducationalExperience.startDate, \"d MMM y\", this.locale);\n        userEducationalExperience.formattedEndDate = formatDate(userEducationalExperience.endDate, \"d MMM y\", this.locale);\n        return userEducationalExperience;\n      });\n    });\n    this.databaseService.getUserSkills(this.userId).subscribe(userSkills => {\n      this.userSkills = userSkills.map(userSkill => {\n        this.databaseService.getSkillById(userSkill.skillId).subscribe(skill => {\n          userSkill.skill = skill;\n        });\n        return userSkill;\n      });\n    });\n    this.databaseService.getUserProjects(this.userId).subscribe(userProjects => {\n      this.userProjects = userProjects.map(userProject => {\n        userProject.formattedStartDate = formatDate(userProject.startDate, \"d MMM y\", this.locale);\n        userProject.formattedEndDate = formatDate(userProject.endDate, \"d MMM y\", this.locale);\n        return userProject;\n      });\n    });\n    this.databaseService.getUserLanguages(this.userId).subscribe(userLanguages => {\n      this.userLanguages = userLanguages.map(userLanguage => {\n        this.databaseService.getLanguageById(userLanguage.languageId).subscribe(language => {\n          userLanguage.language = language;\n        });\n        this.databaseService.getLanguageLevelById(userLanguage.languageLevelId).subscribe(languageLevel => {\n          userLanguage.languageLevel = languageLevel;\n        });\n        return userLanguage;\n      });\n    });\n    this.databaseService.getCompanies().subscribe(companies => {\n      this.companies = companies;\n    });\n    this.databaseService.getEducationalInstitutions().subscribe(educationalInstitutions => {\n      this.educationalInstitutions = educationalInstitutions;\n    });\n  }\n\n  companyPhotoClick(companyId) {\n    this.router.navigate([`/companies/${companyId}`]);\n  }\n\n  institutionPhotoClick(website) {\n    this.document.location.href = website;\n  }\n\n  showUserProfessionalExperienceForm() {\n    this.displayUserProfessionalExperienceForm = true;\n  }\n\n  showUserEducationalExperienceForm() {\n    this.displayUserEducationalExperienceForm = true;\n  }\n\n  showUserSkillForm() {\n    this.displayUserSkillForm = true;\n    this.databaseService.getSkills().subscribe(skills => {\n      this.skills = skills;\n    });\n  }\n\n  showUserProjectForm() {\n    this.displayUserProjectForm = true;\n  }\n\n  showUserLanguageForm() {\n    this.displayUserLanguageForm = true;\n    this.databaseService.getLanguages().subscribe(languages => {\n      this.languages = languages;\n    });\n    this.databaseService.getLanguageLevels().subscribe(languageLevels => {\n      this.languageLevels = languageLevels;\n    });\n  }\n\n  addUserProfessionalExperience() {\n    this.databaseService.addUserProfessionalExperience(this.loggedUser.id, this.selectedCompany.id, this.jobTitle, this.startDate, this.endDate, this.description).pipe(first()).subscribe({\n      next: userProfessionalExperience => {\n        this.displayUserProfessionalExperienceForm = false;\n        this.databaseService.getCompanyById(userProfessionalExperience.companyId).subscribe(company => {\n          userProfessionalExperience.company = company;\n        });\n        userProfessionalExperience.formattedStartDate = formatDate(userProfessionalExperience.startDate, \"d MMM y\", this.locale);\n        userProfessionalExperience.formattedEndDate = formatDate(userProfessionalExperience.endDate, \"d MMM y\", this.locale);\n        this.userProfessionalExperienceList.push(...[userProfessionalExperience]);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  deleteUserProfessionalExperience(id) {\n    this.databaseService.deleteUserProfessionalExperience(id).pipe(first()).subscribe({\n      next: () => {\n        console.log(\"success\");\n        this.userProfessionalExperienceList = this.userProfessionalExperienceList.filter(userProfessionalExperience => userProfessionalExperience.id != id);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  addUserEducationalExperience() {\n    this.databaseService.addUserEducationalExperience(this.loggedUser.id, this.selectedEducationalInstitution.id, this.speciality, this.title, this.edStartDate, this.edEndDate, this.edDescription).pipe(first()).subscribe({\n      next: userEducationalExperience => {\n        this.displayUserEducationalExperienceForm = false;\n        this.databaseService.getEducationalInstitutionById(userEducationalExperience.educationalInstitutionId).subscribe(educationalInstitution => {\n          userEducationalExperience.educationalInstitution = educationalInstitution;\n        });\n        userEducationalExperience.formattedStartDate = formatDate(userEducationalExperience.startDate, \"d MMM y\", this.locale);\n        userEducationalExperience.formattedEndDate = formatDate(userEducationalExperience.endDate, \"d MMM y\", this.locale);\n        this.userEducationalExperienceList.push(...[userEducationalExperience]);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  deleteUserEducationalExperience(id) {\n    this.databaseService.deleteUserEducationalExperience(id).pipe(first()).subscribe({\n      next: () => {\n        console.log(\"success\");\n        this.userEducationalExperienceList = this.userEducationalExperienceList.filter(userEducationalExperience => userEducationalExperience.id != id);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  addUserSkill() {\n    this.databaseService.addUserSkill(this.loggedUser.id, this.selectedSkill.id).pipe(first()).subscribe({\n      next: userSkill => {\n        this.displayUserSkillForm = false;\n        this.databaseService.getSkillById(userSkill.skillId).subscribe(skill => {\n          userSkill.skill = skill;\n        });\n        this.userSkills.push(...[userSkill]);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  deleteUserSkill(skillId) {\n    this.databaseService.deleteUserSkill(this.userId, skillId).pipe(first()).subscribe({\n      next: () => {\n        console.log(\"success\");\n        this.userSkills = this.userSkills.filter(userSkill => userSkill.skillId != skillId);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  addUserProject() {\n    this.databaseService.addUserProject(this.loggedUser.id, this.pName, this.pStartDate, this.pEndDate, this.pDescription).pipe(first()).subscribe({\n      next: userProject => {\n        this.displayUserProjectForm = false;\n        userProject.formattedStartDate = formatDate(userProject.startDate, \"d MMM y\", this.locale);\n        userProject.formattedEndDate = formatDate(userProject.endDate, \"d MMM y\", this.locale);\n        this.userProjects.push(...[userProject]);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  deleteUserProject(id) {\n    this.databaseService.deleteUserProject(id).pipe(first()).subscribe({\n      next: () => {\n        console.log(\"success\");\n        this.userProjects = this.userProjects.filter(userProject => userProject.id != id);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  addUserLanguage() {\n    this.databaseService.addUserLanguage(this.loggedUser.id, this.selectedLanguage.id, this.selectedLanguageLevel.id).pipe(first()).subscribe({\n      next: userLanguage => {\n        this.displayUserLanguageForm = false;\n        this.databaseService.getLanguageById(userLanguage.languageId).subscribe(language => {\n          userLanguage.language = language;\n        });\n        this.databaseService.getLanguageLevelById(userLanguage.languageLevelId).subscribe(languageLevel => {\n          userLanguage.languageLevel = languageLevel;\n        });\n        this.userLanguages.push(...[userLanguage]);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  deleteUserLanguage(languageId) {\n    this.databaseService.deleteUserLanguage(this.userId, languageId).pipe(first()).subscribe({\n      next: () => {\n        console.log(\"success\");\n        this.userLanguages = this.userLanguages.filter(userLanguage => userLanguage.languageId != languageId);\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n};\nUserProfileComponent = __decorate([Component({\n  selector: \"app-user-profile\",\n  templateUrl: \"./user-profile.component.html\",\n  styleUrls: [\"./user-profile.component.scss\"]\n}), __param(4, Inject(LOCALE_ID)), __param(5, Inject(DOCUMENT))], UserProfileComponent);\nexport { UserProfileComponent };","map":null,"metadata":{},"sourceType":"module"}