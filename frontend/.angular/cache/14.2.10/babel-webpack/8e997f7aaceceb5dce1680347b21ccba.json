{"ast":null,"code":"import { first } from \"rxjs\";\nimport { FileUpload } from \"primeng/fileupload\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services\";\nexport let ManagerHomeComponent = /*#__PURE__*/(() => {\n  class ManagerHomeComponent {\n    constructor(router, accountService, databaseService) {\n      this.router = router;\n      this.accountService = accountService;\n      this.databaseService = databaseService; //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n      this.companyId = 4;\n      this.displayIndustryForm = false;\n      this.displayCompanyDetailsForm = false;\n    }\n\n    ngOnInit() {\n      this.accountService.user.subscribe(x => this.loggedUser = x);\n      this.databaseService.getCompanyById(this.companyId).subscribe(company => {\n        this.databaseService.getCityById(company.cityId).subscribe(city => {\n          company.city = city;\n          this.databaseService.getCountryById(company.city.countryId).subscribe(country => {\n            company.country = country;\n          });\n        });\n        this.company = company;\n      });\n      this.databaseService.getCompanyIndustriesByCompanyId(this.companyId).subscribe(companyIndustries => {\n        this.companyIndustries = companyIndustries.map(companyIndustry => {\n          this.databaseService.getIndustryByID(companyIndustry.industryId).subscribe(industry => {\n            companyIndustry.industry = industry;\n          });\n          return companyIndustry;\n        });\n      });\n    }\n\n    showIndustryForm() {\n      this.displayIndustryForm = true;\n      this.databaseService.getIndustries().subscribe(industries => {\n        this.industries = industries;\n      });\n    }\n\n    addCompanyIndustry() {\n      this.databaseService.addCompanyIndustry(this.companyId, this.selectedIndustry.id).pipe(first()).subscribe({\n        next: companyIndustry => {\n          console.log(companyIndustry);\n          this.displayIndustryForm = false;\n          this.databaseService.getIndustryByID(companyIndustry.industryId).subscribe(industry => {\n            companyIndustry.industry = industry;\n          });\n          this.companyIndustries.push(...[companyIndustry]);\n        },\n        error: error => {\n          console.log(\"error\");\n        }\n      });\n    }\n\n    deleteCompanyIndustry(industryId) {\n      this.databaseService.deleteCompanyIndustry(this.companyId, industryId).pipe(first()).subscribe({\n        next: () => {\n          console.log(\"success\");\n          this.companyIndustries = this.companyIndustries.filter(companyIndustry => companyIndustry.industryId != industryId);\n        },\n        error: error => {\n          console.log(\"error\");\n        }\n      });\n    }\n\n    showCompanyDetailsForm() {\n      this.displayCompanyDetailsForm = true;\n      this.databaseService.getCountries().subscribe(countries => {\n        this.countries = countries;\n      });\n      this.selectedCountry = this.company.country;\n      this.databaseService.getCitiesByCountryId(this.selectedCountry.id).subscribe(cities => {\n        this.cities = cities;\n        this.selectedCity = this.company.city;\n      });\n      this.companyName = this.company.name;\n      this.companyWebsite = this.company.website;\n      this.companyDescription = this.company.description;\n    }\n\n    saveCompanyDetails() {\n      this.databaseService.updateCompany(this.company.id, this.companyName, this.companyWebsite, this.selectedCity.id, this.companyDescription, this.company.photo).pipe(first()).subscribe({\n        next: company => {\n          this.displayCompanyDetailsForm = false;\n          this.databaseService.getCityById(company.cityId).subscribe(city => {\n            company.city = city;\n            this.databaseService.getCountryById(company.city.countryId).subscribe(country => {\n              company.country = country;\n            });\n          });\n          this.company = company;\n        },\n        error: error => {\n          console.log(\"error\");\n        }\n      });\n\n      if (this.imageUpload.hasFiles()) {\n        this.databaseService.uploadCompanyImage(this.company.id, this.imageUpload).pipe(first()).subscribe({\n          next: event => {\n            console.log(\"success\");\n          },\n          error: error => {\n            console.log(\"error\");\n          }\n        });\n      }\n    }\n\n    onChangeCountry(event) {\n      this.cities = [];\n\n      if (this.selectedCountry) {\n        this.databaseService.getCitiesByCountryId(this.selectedCountry.id).subscribe(cities => {\n          this.cities.push(...cities);\n        });\n      } else {}\n    }\n\n  }\n\n  ManagerHomeComponent.ɵfac = function ManagerHomeComponent_Factory(t) {\n    return new (t || ManagerHomeComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AccountService), i0.ɵɵdirectiveInject(i2.DatabaseService));\n  };\n\n  ManagerHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ManagerHomeComponent,\n    selectors: [[\"app-manager-home\"]],\n    viewQuery: function ManagerHomeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(FileUpload, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.imageUpload = _t.first);\n      }\n    },\n    decls: 0,\n    vars: 0,\n    template: function ManagerHomeComponent_Template(rf, ctx) {},\n    styles: [\".companyLogo[_ngcontent-%COMP%]{margin-left:5%;float:left;height:8em;width:8em}[_nghost-%COMP%]     .p-button{margin-right:10em;float:right}h3[_ngcontent-%COMP%]{float:left}.tabbed[_ngcontent-%COMP%]{margin-left:5%}.add[_ngcontent-%COMP%]{float:left;margin-left:2em}.edit[_ngcontent-%COMP%]{margin-right:2em}\"]\n  });\n  return ManagerHomeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}