{"ast":null,"code":"import { environment } from \"../../environments/environment\";\nimport { Job } from \"../models\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getCities() {\n      return this.http.get(`${environment.databaseApiURL}/cities`);\n    }\n\n    getCityById(id) {\n      return this.http.get(`${environment.databaseApiURL}/cities/${id}`);\n    }\n\n    getCompanies() {\n      return this.http.get(`${environment.databaseApiURL}/companies`);\n    }\n\n    getCompanyById(id) {\n      return this.http.get(`${environment.databaseApiURL}/companies/${id}`);\n    }\n\n    getCountries() {\n      return this.http.get(`${environment.databaseApiURL}/countries`);\n    }\n\n    getCountryById(id) {\n      return this.http.get(`${environment.databaseApiURL}/countries/${id}`);\n    }\n\n    getExperienceLevels() {\n      return this.http.get(`${environment.databaseApiURL}/experience-levels`);\n    }\n\n    getExperienceLevelById(id) {\n      return this.http.get(`${environment.databaseApiURL}/experience-levels/${id}`);\n    }\n\n    getIndustries() {\n      return this.http.get(`${environment.databaseApiURL}/industries`);\n    }\n\n    getIndustryByID(id) {\n      return this.http.get(`${environment.databaseApiURL}/industries/${id}`);\n    }\n\n    getJobTypes() {\n      return this.http.get(`${environment.databaseApiURL}/job-types`);\n    }\n\n    getJobTypeById(id) {\n      return this.http.get(`${environment.databaseApiURL}/job-types/${id}`);\n    }\n\n    getWorkTypes() {\n      return this.http.get(`${environment.databaseApiURL}/work-types`);\n    }\n\n    getWorkTypeById(id) {\n      return this.http.get(`${environment.databaseApiURL}/work-types/${id}`);\n    }\n\n    getJobs(page, maxJobs, countries, companies, industries, workTypes, jobTypes, experienceLevels) {\n      let URL = `${environment.searchApiURL}/jobs?page=${page}&size=${maxJobs}`;\n\n      if (typeof countries !== \"undefined\") {\n        const countryQueryParam = `&countryId=${countries.map(country => country.id).join(\",\")}`;\n        URL += countryQueryParam;\n      }\n\n      if (typeof companies !== \"undefined\") {\n        const companyQueryParam = `&companyId=${companies.map(company => company.id).join(\",\")}`;\n        URL += companyQueryParam;\n      }\n\n      if (typeof industries !== \"undefined\") {\n        const industryQueryParam = `&industryId=${industries.map(industry => industry.id).join(\",\")}`;\n        URL += industryQueryParam;\n      }\n\n      if (typeof workTypes !== \"undefined\") {\n        const workTypeQueryParam = `&workTypeId=${workTypes.map(workType => workType.id).join(\",\")}`;\n        URL += workTypeQueryParam;\n      }\n\n      if (typeof jobTypes !== \"undefined\") {\n        const jobTypeQueryParam = `&jobTypeId=${jobTypes.map(jobType => jobType.id).join(\",\")}`;\n        URL += jobTypeQueryParam;\n      }\n\n      if (typeof experienceLevels !== \"undefined\") {\n        const experienceLevelQueryParam = `&experienceLevelId=${experienceLevels.map(experienceLevel => experienceLevel.id).join(\",\")}`;\n        URL += experienceLevelQueryParam;\n      }\n\n      return this.http.get(URL);\n    }\n\n    getJobById(id) {\n      return this.http.get(`${environment.databaseApiURL}/jobs/${id}`);\n    }\n\n    toJob(jobResponse) {\n      const job = new Job();\n      job.id = jobResponse.id;\n      job.title = jobResponse.title;\n      this.getCompanyById(jobResponse.companyId).subscribe(company => {\n        job.company = company;\n      });\n      this.getCityById(jobResponse.cityId).subscribe(city => {\n        job.city = city;\n      });\n      this.getCountryById(jobResponse.countryId).subscribe(country => {\n        job.country = country;\n      });\n      this.getWorkTypeById(jobResponse.workTypeId).subscribe(workType => {\n        job.workType = workType;\n      });\n      job.description = jobResponse.description;\n      return job;\n    }\n\n  }\n\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    return new (t || DatabaseService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac,\n    providedIn: \"root\"\n  });\n  return DatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}