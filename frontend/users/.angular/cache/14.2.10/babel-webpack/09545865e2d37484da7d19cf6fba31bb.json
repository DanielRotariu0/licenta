{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Input, LOCALE_ID, Inject, ViewChild } from \"@angular/core\";\nimport { ConfirmationService } from \"primeng/api\";\nimport { first } from \"rxjs/operators\";\nimport { formatDate } from \"@angular/common\";\nimport { saveAs } from \"file-saver\";\nimport { FileUpload } from \"primeng/fileupload\";\nlet JobApplicationDetailsComponent = class JobApplicationDetailsComponent {\n  constructor(accountService, jobApplicationService, messageService, confirmationService, locale) {\n    this.accountService = accountService;\n    this.jobApplicationService = jobApplicationService;\n    this.messageService = messageService;\n    this.confirmationService = confirmationService;\n    this.locale = locale;\n    this.displayReviewForm = false;\n    this.inputRating = 0;\n    this.inputDescription = \"\";\n    this.textareaValue = \"\";\n    this.accountService.user.subscribe(x => this.user = x);\n  }\n\n  ngOnDestroy() {\n    this.jobApplicationService.selectedJobApplicationId = null;\n  }\n\n  ngOnInit() {\n    this.jobApplicationService.currentNewMessage.subscribe(msg => {\n      msg.formattedTimestamp = formatDate(msg.timestamp, \"d MMM y, h:mm:ss a\", this.locale);\n\n      if (this.jobApplicationService.selectedJobApplicationId === this.jobApplication.id) {\n        this.jobApplication.messageList.add(msg);\n      }\n    });\n    this.scrollToBottom();\n    this.jobApplicationService.getFileList(this.jobApplication.id).subscribe(result => {\n      this.fileList = result;\n    });\n  }\n\n  sendMessage() {\n    let content = this.textareaValue.trim();\n\n    if (content !== \"\") {\n      this.jobApplicationService.addMessage(this.jobApplication.id, {\n        userId: this.user.id,\n        content: content\n      }).pipe(first()).subscribe({\n        next: message => {\n          message.formattedTimestamp = formatDate(message.timestamp, \"d MMM y, h:mm:ss a\", this.locale);\n          console.log(this.jobApplication.messageList);\n          this.jobApplication.messageList = new Set(this.jobApplication.messageList);\n          this.jobApplication.messageList.add(message);\n          this.textareaValue = \"\";\n        },\n        error: error => {\n          console.log(\"error\");\n        }\n      });\n    }\n  }\n\n  onClickWithdraw() {\n    this.confirmationService.confirm({\n      message: \"Do you want to withdraw this job application?\",\n      header: \"Withdraw Confirmation\",\n      icon: \"pi pi-info-circle\",\n      accept: () => {\n        this.jobApplicationService.update(this.jobApplication.id, 8).pipe(first()).subscribe({\n          next: () => {\n            this.jobApplication.status.name = \"WITHDRAWN\";\n            this.messageService.add({\n              severity: \"success\",\n              summary: \"Success\",\n              detail: \"You have withdrawn your job application\"\n            });\n          },\n          error: error => {\n            this.messageService.add({\n              severity: \"error\",\n              summary: \"Error\",\n              detail: \"An error has occured\"\n            });\n          }\n        });\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom() {\n    try {\n      this.myScrollContainer.nativeElement.scroll({\n        top: this.myScrollContainer.nativeElement.scrollHeight,\n        left: 0\n      });\n    } catch (err) {}\n  }\n\n  showReviewForm() {\n    this.displayReviewForm = true;\n    this.inputRating = this.jobApplication.review.rating;\n    this.inputDescription = this.jobApplication.review.description;\n  }\n\n  saveReview() {\n    this.jobApplicationService.updateReview(this.user.id, this.jobApplication.id, this.inputRating, this.inputDescription).pipe(first()).subscribe({\n      next: review => {\n        this.displayReviewForm = false;\n        this.jobApplication.review = review;\n      },\n      error: error => {\n        console.log(\"error\");\n      }\n    });\n  }\n\n  downloadFile(fileData) {\n    this.jobApplicationService.downloadFile(this.jobApplication.id, fileData.filename).subscribe(blob => saveAs(blob, fileData.filename));\n  }\n\n};\n\n__decorate([ViewChild(\"scrollMe\")], JobApplicationDetailsComponent.prototype, \"myScrollContainer\", void 0);\n\n__decorate([ViewChild(FileUpload)], JobApplicationDetailsComponent.prototype, \"fileupload\", void 0);\n\n__decorate([Input()], JobApplicationDetailsComponent.prototype, \"jobApplication\", void 0);\n\nJobApplicationDetailsComponent = __decorate([Component({\n  selector: \"app-job-application-details\",\n  templateUrl: \"./job-application-details.component.html\",\n  styleUrls: [\"./job-application-details.component.css\"],\n  providers: [ConfirmationService]\n}), __param(4, Inject(LOCALE_ID))], JobApplicationDetailsComponent);\nexport { JobApplicationDetailsComponent };","map":null,"metadata":{},"sourceType":"module"}