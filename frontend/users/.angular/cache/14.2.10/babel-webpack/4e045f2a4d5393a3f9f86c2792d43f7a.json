{"ast":null,"code":"import { distinctUntilChanged, first } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services\";\nimport * as i2 from \"src/app/services/notification.service\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"primeng/menubar\";\nexport let MenubarComponent = /*#__PURE__*/(() => {\n  class MenubarComponent {\n    constructor(accountService, notificationService, jobApplicationService, menuItemsService, webSocketService, messageService) {\n      this.accountService = accountService;\n      this.notificationService = notificationService;\n      this.jobApplicationService = jobApplicationService;\n      this.menuItemsService = menuItemsService;\n      this.webSocketService = webSocketService;\n      this.messageService = messageService;\n      this.items = [];\n      this.unreadNotifications = 0;\n    }\n\n    ngOnInit() {\n      this.accountService.user.subscribe(user => {\n        this.user = user;\n        let stompClient = this.webSocketService.connect();\n        stompClient.connect({}, frame => {\n          stompClient.subscribe(`/user/${this.user.id}/notifications`, msg => {\n            let notification = JSON.parse(msg.body);\n\n            if (notification.jobApplicationId === this.jobApplicationService.selectedJobApplicationId && notification.message != null) {\n              this.jobApplicationService.updateNewMessage(notification.message);\n              this.notificationService.deleteNotification(this.user.id, notification.id).pipe(first()).subscribe({\n                next: () => {\n                  console.log(\"deleted\");\n                },\n                error: error => {\n                  console.log(\"error\");\n                }\n              });\n            } else {\n              this.messageService.add({\n                severity: \"info\",\n                summary: \"Notification\",\n                detail: notification.text\n              });\n              this.menuItemsService.menuItems$.pipe(distinctUntilChanged()).subscribe(menuItems => {\n                menuItems[menuItems.length - 2].badge = String(Number(menuItems[menuItems.length - 2].badge) + 1);\n                this.menuItemsService.updateMenuItems(menuItems);\n              });\n            }\n          });\n        });\n        this.notificationService.getUserNotifications(this.user.id).subscribe(notifications => {\n          var _a;\n\n          this.unreadNotifications = notifications.filter(notification => notification.isRead == false).length;\n          let candidateItems = [{\n            label: \"Home\",\n            icon: \"pi pi-fw pi-home\",\n            style: {\n              \"margin-left\": \"auto\"\n            },\n            routerLink: \"/home\"\n          }, {\n            label: \"Companies\",\n            icon: \"pi pi-fw pi-globe\",\n            routerLink: \"/companies\"\n          }, {\n            label: \"Jobs\",\n            icon: \"pi pi-fw pi-briefcase\",\n            routerLink: \"/jobs\"\n          }, {\n            label: \"My Job Applications\",\n            icon: \"pi pi-fw pi-envelope\",\n            routerLink: \"/job-applications\"\n          }, {\n            label: \"Profile\",\n            icon: \"pi pi-fw pi-user\",\n            routerLink: `/users/${(_a = this.user) === null || _a === void 0 ? void 0 : _a.id}`\n          }, {\n            label: \"Notifications\",\n            icon: \"pi pi-fw pi-bell\",\n            routerLink: \"/notifications\",\n            badge: `${this.unreadNotifications}`\n          }, {\n            label: \"Logout\",\n            icon: \"pi pi-fw pi-sign-out\",\n            command: () => this.logout()\n          }];\n          let recruiterItems = [{\n            label: \"Home\",\n            icon: \"pi pi-fw pi-home\",\n            style: {\n              \"margin-left\": \"auto\"\n            },\n            routerLink: \"/recruiter-home\"\n          }, {\n            label: \"Notifications\",\n            icon: \"pi pi-fw pi-bell\",\n            routerLink: \"/notifications\",\n            badge: `${this.unreadNotifications}`\n          }, {\n            label: \"Logout\",\n            icon: \"pi pi-fw pi-sign-out\",\n            command: () => this.logout()\n          }];\n          let managerItems = [{\n            label: \"Home\",\n            icon: \"pi pi-fw pi-home\",\n            style: {\n              \"margin-left\": \"auto\"\n            },\n            routerLink: \"/manager-home\"\n          }, {\n            label: \"Recruiters\",\n            icon: \"pi pi-fw pi-user\",\n            routerLink: \"/company-recruiters\"\n          }, {\n            label: \"Logout\",\n            icon: \"pi pi-fw pi-sign-out\",\n            command: () => this.logout()\n          }];\n\n          if (user.isManager) {\n            this.menuItemsService.updateMenuItems(managerItems);\n          } else if (user.isRecruiter) {\n            this.menuItemsService.updateMenuItems(recruiterItems);\n          } else {\n            this.menuItemsService.updateMenuItems(candidateItems);\n          }\n\n          this.menuItemsService.menuItems$.subscribe(menuItems => this.items = menuItems);\n        });\n      });\n    }\n\n    logout() {\n      this.accountService.logout();\n    }\n\n  }\n\n  MenubarComponent.ɵfac = function MenubarComponent_Factory(t) {\n    return new (t || MenubarComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.NotificationService), i0.ɵɵdirectiveInject(i1.JobApplicationService), i0.ɵɵdirectiveInject(i1.MenuItemsService), i0.ɵɵdirectiveInject(i1.WebSocketService), i0.ɵɵdirectiveInject(i3.MessageService));\n  };\n\n  MenubarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MenubarComponent,\n    selectors: [[\"app-menubar\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"model\"]],\n    template: function MenubarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"p-menubar\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"model\", ctx.items);\n      }\n    },\n    dependencies: [i4.Menubar],\n    styles: [\"[_nghost-%COMP%]     p-menubarsub{width:100%}\"]\n  });\n  return MenubarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}