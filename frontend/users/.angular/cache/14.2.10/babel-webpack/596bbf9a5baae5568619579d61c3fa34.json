{"ast":null,"code":"import { environment } from \"../../environments/environment\";\nimport { Job } from \"../models\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    saveUserDetails(userId, firstName, lastName, phoneNumber, cityId, address, profileDescription, profilePictureUrl) {\n      return this.http.put(`${environment.apiUrl}/users/${userId}/details`, {\n        userId,\n        firstName,\n        lastName,\n        phoneNumber,\n        cityId,\n        address,\n        profileDescription,\n        profilePictureUrl\n      });\n    }\n\n    getUserDetails(userId) {\n      return this.http.get(`${environment.apiUrl}/users/${userId}/details`);\n    }\n\n    getUserEducationalExperience(userId) {\n      return this.http.get(`${environment.apiUrl}/users/${userId}/educational-experience`);\n    }\n\n    getUserProfessionalExperience(userId) {\n      return this.http.get(`${environment.apiUrl}/users/${userId}/professional-experience`);\n    }\n\n    getUserSkills(userId) {\n      return this.http.get(`${environment.apiUrl}/users/${userId}/skills`);\n    }\n\n    getUserProjects(userId) {\n      return this.http.get(`${environment.apiUrl}/users/${userId}/projects`);\n    }\n\n    getUserLanguages(userId) {\n      return this.http.get(`${environment.apiUrl}/users/${userId}/languages`);\n    }\n\n    getEducationalInstitutions() {\n      return this.http.get(`${environment.apiUrl}/educational-institutions`);\n    }\n\n    getEducationalInstitutionById(id) {\n      return this.http.get(`${environment.apiUrl}/educational-institutions/${id}`);\n    }\n\n    getSkillById(id) {\n      return this.http.get(`${environment.apiUrl}/skills/${id}`);\n    }\n\n    getSkills() {\n      return this.http.get(`${environment.apiUrl}/skills`);\n    }\n\n    getLanguageById(id) {\n      return this.http.get(`${environment.apiUrl}/languages/${id}`);\n    }\n\n    getLanguages() {\n      return this.http.get(`${environment.apiUrl}/languages`);\n    }\n\n    getLanguageLevels() {\n      return this.http.get(`${environment.apiUrl}/language-levels`);\n    }\n\n    getLanguageLevelById(id) {\n      return this.http.get(`${environment.apiUrl}/language-levels/${id}`);\n    }\n\n    deleteUserProfessionalExperience(id) {\n      return this.http.delete(`${environment.apiUrl}/professional-experience/${id}`);\n    }\n\n    deleteUserEducationalExperience(id) {\n      return this.http.delete(`${environment.apiUrl}/educational-experience/${id}`);\n    }\n\n    deleteUserSkill(userId, skillId) {\n      return this.http.delete(`${environment.apiUrl}/users/${userId}/skills/${skillId}`);\n    }\n\n    deleteUserProject(id) {\n      return this.http.delete(`${environment.apiUrl}/projects/${id}`);\n    }\n\n    deleteUserLanguage(userId, languageId) {\n      return this.http.delete(`${environment.apiUrl}/users/${userId}/languages/${languageId}`);\n    }\n\n    uploadUserImage(userId, imageUpload) {\n      imageUpload.url = `${environment.databaseApiURL}/users/${userId}/details/image`;\n      imageUpload.upload();\n      return imageUpload.onUpload.asObservable();\n    }\n\n    addUserProfessionalExperience(userId, companyId, jobTitle, startDate, endDate, description) {\n      return this.http.post(`${environment.apiUrl}/professional-experience`, {\n        userId,\n        companyId,\n        jobTitle,\n        startDate,\n        endDate,\n        description\n      });\n    }\n\n    addUserEducationalExperience(userId, educationalInstitutionId, speciality, title, startDate, endDate, description) {\n      return this.http.post(`${environment.apiUrl}/educational-experience`, {\n        userId,\n        educationalInstitutionId,\n        speciality,\n        title,\n        startDate,\n        endDate,\n        description\n      });\n    }\n\n    addUserSkill(userId, skillId) {\n      return this.http.post(`${environment.apiUrl}/users/${userId}/skills`, {\n        skillId\n      });\n    }\n\n    addUserProject(userId, name, startDate, endDate, description) {\n      return this.http.post(`${environment.apiUrl}/projects`, {\n        userId,\n        name,\n        startDate,\n        endDate,\n        description\n      });\n    }\n\n    addUserLanguage(userId, languageId, languageLevelId) {\n      return this.http.post(`${environment.apiUrl}/users/${userId}/languages`, {\n        languageId,\n        languageLevelId\n      });\n    }\n\n    addJob(title, recruiterId, companyIndustryId, cityId, workTypeId, jobTypeId, experienceLevelId, description) {\n      return this.http.post(`${environment.databaseApiURL}/jobs`, {\n        title,\n        recruiterId,\n        companyIndustryId,\n        cityId,\n        workTypeId,\n        jobTypeId,\n        experienceLevelId,\n        description\n      });\n    }\n\n    editJob(jobId, title, recruiterId, companyIndustryId, cityId, workTypeId, jobTypeId, experienceLevelId, description, jobStatusId) {\n      return this.http.put(`${environment.databaseApiURL}/jobs/${jobId}`, {\n        title,\n        recruiterId,\n        companyIndustryId,\n        cityId,\n        workTypeId,\n        jobTypeId,\n        experienceLevelId,\n        description,\n        jobStatusId\n      });\n    }\n\n    getCities() {\n      return this.http.get(`${environment.databaseApiURL}/cities`);\n    }\n\n    getCitiesByCountryId(countryId) {\n      return this.http.get(`${environment.databaseApiURL}/countries/${countryId}/cities`);\n    }\n\n    getCityById(id) {\n      return this.http.get(`${environment.databaseApiURL}/cities/${id}`);\n    }\n\n    getCompanies() {\n      return this.http.get(`${environment.databaseApiURL}/companies`);\n    }\n\n    getCompanyById(id) {\n      return this.http.get(`${environment.databaseApiURL}/companies/${id}`);\n    }\n\n    updateCompany(companyId, name, website, cityId, description, photo) {\n      return this.http.put(`${environment.databaseApiURL}/companies/${companyId}`, {\n        name,\n        photo,\n        description,\n        cityId,\n        website\n      });\n    }\n\n    uploadCompanyImage(companyId, imageUpload) {\n      imageUpload.url = `${environment.databaseApiURL}/companies/${companyId}/image`;\n      imageUpload.upload();\n      return imageUpload.onUpload.asObservable();\n    }\n\n    getCompaniesByIndustryId(industryId) {\n      return this.http.get(`${environment.databaseApiURL}/industries/${industryId}/companies`);\n    }\n\n    getRecruiterById(recruiterId) {\n      return this.http.get(`${environment.apiUrl}/users/${recruiterId}`);\n    }\n\n    addCompanyIndustry(companyId, industryId) {\n      return this.http.post(`${environment.databaseApiURL}/company-industries`, {\n        companyId,\n        industryId\n      });\n    }\n\n    addCompanyRecruiter(companyId, email, password) {\n      return this.http.post(`${environment.apiUrl}/company-recruiters`, {\n        companyId,\n        email,\n        password\n      });\n    }\n\n    getCompanyIndustriesByCompanyId(companyId) {\n      return this.http.get(`${environment.databaseApiURL}/companies/${companyId}/company-industries`);\n    }\n\n    deleteCompanyIndustry(companyId, industryId) {\n      return this.http.delete(`${environment.databaseApiURL}/companies/${companyId}/industries/${industryId}`);\n    }\n\n    getCompanyRecruitersByCompanyId(companyId) {\n      return this.http.get(`${environment.databaseApiURL}/companies/${companyId}/company-recruiters`);\n    }\n\n    deleteCompanyRecruiter(companyId, recruiterId) {\n      return this.http.delete(`${environment.apiUrl}/companies/${companyId}/recruiters/${recruiterId}`);\n    }\n\n    getCountries() {\n      return this.http.get(`${environment.databaseApiURL}/countries`);\n    }\n\n    getCountryById(id) {\n      return this.http.get(`${environment.databaseApiURL}/countries/${id}`);\n    }\n\n    getExperienceLevels() {\n      return this.http.get(`${environment.databaseApiURL}/experience-levels`);\n    }\n\n    getExperienceLevelById(id) {\n      return this.http.get(`${environment.databaseApiURL}/experience-levels/${id}`);\n    }\n\n    getIndustries() {\n      return this.http.get(`${environment.databaseApiURL}/industries`);\n    }\n\n    getIndustryByID(id) {\n      return this.http.get(`${environment.databaseApiURL}/industries/${id}`);\n    }\n\n    getJobTypes() {\n      return this.http.get(`${environment.databaseApiURL}/job-types`);\n    }\n\n    getJobTypeById(id) {\n      return this.http.get(`${environment.databaseApiURL}/job-types/${id}`);\n    }\n\n    getWorkTypes() {\n      return this.http.get(`${environment.databaseApiURL}/work-types`);\n    }\n\n    getWorkTypeById(id) {\n      return this.http.get(`${environment.databaseApiURL}/work-types/${id}`);\n    }\n\n    getJobStatus() {\n      return this.http.get(`${environment.databaseApiURL}/job-status`);\n    }\n\n    getJobStatusById(id) {\n      return this.http.get(`${environment.databaseApiURL}/job-status/${id}`);\n    }\n\n    padTo2Digits(num) {\n      return num.toString().padStart(2, \"0\");\n    }\n\n    getJobs(page, maxJobs, open, title, countries, cities, companies, industries, workTypes, jobTypes, experienceLevels, description, postedSince, cached) {\n      let URL = `${environment.searchApiURL}/jobs?page=${page}&size=${maxJobs}`;\n\n      if (typeof title !== \"undefined\") {\n        const titleQueryParam = `&title=${title}`;\n        URL += titleQueryParam;\n      }\n\n      if (typeof countries !== \"undefined\") {\n        const countryQueryParam = `&countryId=${countries.map(country => country.id).join(\",\")}`;\n        URL += countryQueryParam;\n      }\n\n      if (typeof cities !== \"undefined\") {\n        const cityQueryParam = `&cityId=${cities.map(city => city.id).join(\",\")}`;\n        URL += cityQueryParam;\n      }\n\n      if (typeof companies !== \"undefined\") {\n        const companyQueryParam = `&companyId=${companies.map(company => company.id).join(\",\")}`;\n        URL += companyQueryParam;\n      }\n\n      if (typeof industries !== \"undefined\") {\n        const industryQueryParam = `&industryId=${industries.map(industry => industry === null || industry === void 0 ? void 0 : industry.id).join(\",\")}`;\n        URL += industryQueryParam;\n      }\n\n      if (typeof workTypes !== \"undefined\") {\n        const workTypeQueryParam = `&workTypeId=${workTypes.map(workType => workType.id).join(\",\")}`;\n        URL += workTypeQueryParam;\n      }\n\n      if (typeof jobTypes !== \"undefined\") {\n        const jobTypeQueryParam = `&jobTypeId=${jobTypes.map(jobType => jobType.id).join(\",\")}`;\n        URL += jobTypeQueryParam;\n      }\n\n      if (typeof experienceLevels !== \"undefined\") {\n        const experienceLevelQueryParam = `&experienceLevelId=${experienceLevels.map(experienceLevel => experienceLevel.id).join(\",\")}`;\n        URL += experienceLevelQueryParam;\n      }\n\n      if (typeof description !== \"undefined\") {\n        const descriptionQueryParam = `&descriptionKeyword=${description.split(\" \").join(\",\")}`;\n        URL += descriptionQueryParam;\n      }\n\n      if (typeof postedSince !== \"undefined\") {\n        console.log(\"3\");\n        const postedSinceQueryParam = `&postedSince=${[postedSince.getFullYear(), this.padTo2Digits(postedSince.getMonth() + 1), this.padTo2Digits(postedSince.getDate())].join(\"-\") + \" 00:00:00\"}`;\n        console.log(postedSinceQueryParam);\n        URL += postedSinceQueryParam;\n      }\n\n      if (typeof cached !== \"undefined\") {\n        const cachedQueryParam = `&cached=${cached}`;\n        URL += cachedQueryParam;\n      }\n\n      if (open) {\n        const jobStatusQueryParam = `&jobStatusId=1`;\n        URL += jobStatusQueryParam;\n      }\n\n      return this.http.get(URL);\n    }\n\n    getJobById(id) {\n      return this.http.get(`${environment.databaseApiURL}/jobs/${id}`);\n    }\n\n    getCompanyIndustriesFollowedByUser(userId) {\n      return this.http.get(`${environment.databaseApiURL}/users/${userId}/followed-company-industries`);\n    }\n\n    createCompanyIndustryFollower(userId, companyIndustryId) {\n      return this.http.post(`${environment.databaseApiURL}/company-industry-followers`, {\n        userId,\n        companyIndustryId\n      });\n    }\n\n    deleteCompanyIndustryFollower(userId, companyIndustryId) {\n      return this.http.delete(`${environment.databaseApiURL}/users/${userId}/followed-company-industries/${companyIndustryId}`);\n    }\n\n    toJob(jobResponse) {\n      const job = new Job();\n      job.id = jobResponse.id;\n      job.title = jobResponse.title;\n      this.getCompanyById(jobResponse.companyId).subscribe(company => {\n        job.company = company;\n      });\n      this.getCityById(jobResponse.cityId).subscribe(city => {\n        job.city = city;\n      });\n      this.getCountryById(jobResponse.countryId).subscribe(country => {\n        job.country = country;\n      });\n      this.getWorkTypeById(jobResponse.workTypeId).subscribe(workType => {\n        job.workType = workType;\n      });\n      this.getJobTypeById(jobResponse.jobTypeId).subscribe(jobType => {\n        job.jobType = jobType;\n      });\n      this.getExperienceLevelById(jobResponse.experienceLevelId).subscribe(experienceLevel => {\n        job.experienceLevel = experienceLevel;\n      });\n      this.getJobStatusById(jobResponse.jobStatusId).subscribe(jobStatus => {\n        job.jobStatus = jobStatus;\n      });\n      this.getIndustryByID(jobResponse.industryId).subscribe(industry => {\n        job.industry = industry;\n      });\n      job.description = jobResponse.description;\n      return job;\n    }\n\n  }\n\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    return new (t || DatabaseService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac,\n    providedIn: \"root\"\n  });\n  return DatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}