{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { first, map } from \"rxjs/operators\";\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem(\"user\")));\n      this.user = this.userSubject.asObservable();\n    }\n\n    get userValue() {\n      return this.userSubject.value;\n    }\n\n    login(email, password) {\n      return this.http.post(`${environment.apiUrl}/login`, {\n        email,\n        password\n      }).pipe(map(user => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        let candidateId = 1;\n        let recruiterId = 2;\n        let managerId = 3;\n        let role = user.userRoles.find(role => role.roleId == candidateId);\n\n        if (role) {\n          user.isCandidate = true;\n          user.companyId = 0;\n        } else {\n          user.isCandidate = false;\n        }\n\n        role = user.userRoles.find(role => role.roleId == recruiterId);\n\n        if (role) {\n          user.isRecruiter = true;\n          user.companyId = role.companyId;\n        } else {\n          user.isRecruiter = false;\n        }\n\n        role = user.userRoles.find(role => role.roleId == managerId);\n\n        if (role) {\n          user.isManager = true;\n          user.companyId = role.companyId;\n        } else {\n          user.isManager = false;\n        }\n\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        this.userSubject.next(user);\n        return user;\n      }));\n    }\n\n    logout() {\n      this.http.post(`${environment.apiUrl}/logout`, {\n        token: this.userValue.token\n      }).pipe(first()).subscribe({\n        next: () => {\n          localStorage.removeItem(\"user\");\n          this.userSubject.next(null);\n          this.router.navigate([\"/account/login\"]);\n        },\n        error: error => {\n          console.log(\"error\");\n        }\n      });\n    }\n\n    register(email, password) {\n      return this.http.post(`${environment.apiUrl}/register`, {\n        email,\n        password\n      });\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}